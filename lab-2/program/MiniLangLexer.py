# Generated from program/MiniLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,183,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,
        11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,23,4,23,143,8,23,11,23,12,23,144,1,
        24,1,24,5,24,149,8,24,10,24,12,24,152,9,24,1,24,1,24,1,25,4,25,157,
        8,25,11,25,12,25,158,1,26,3,26,162,8,26,1,26,1,26,1,27,4,27,167,
        8,27,11,27,12,27,168,1,27,1,27,1,28,1,28,1,28,1,28,5,28,177,8,28,
        10,28,12,28,180,9,28,1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        1,0,5,2,0,65,90,97,122,5,0,10,10,13,13,34,34,39,39,124,124,1,0,48,
        57,2,0,9,9,32,32,2,0,10,10,13,13,188,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,5,63,1,0,0,0,7,65,1,
        0,0,0,9,67,1,0,0,0,11,69,1,0,0,0,13,71,1,0,0,0,15,73,1,0,0,0,17,
        75,1,0,0,0,19,78,1,0,0,0,21,81,1,0,0,0,23,83,1,0,0,0,25,85,1,0,0,
        0,27,88,1,0,0,0,29,91,1,0,0,0,31,94,1,0,0,0,33,99,1,0,0,0,35,104,
        1,0,0,0,37,110,1,0,0,0,39,116,1,0,0,0,41,119,1,0,0,0,43,128,1,0,
        0,0,45,133,1,0,0,0,47,142,1,0,0,0,49,146,1,0,0,0,51,156,1,0,0,0,
        53,161,1,0,0,0,55,166,1,0,0,0,57,172,1,0,0,0,59,60,5,61,0,0,60,2,
        1,0,0,0,61,62,5,40,0,0,62,4,1,0,0,0,63,64,5,44,0,0,64,6,1,0,0,0,
        65,66,5,41,0,0,66,8,1,0,0,0,67,68,5,42,0,0,68,10,1,0,0,0,69,70,5,
        47,0,0,70,12,1,0,0,0,71,72,5,43,0,0,72,14,1,0,0,0,73,74,5,45,0,0,
        74,16,1,0,0,0,75,76,5,61,0,0,76,77,5,61,0,0,77,18,1,0,0,0,78,79,
        5,33,0,0,79,80,5,61,0,0,80,20,1,0,0,0,81,82,5,60,0,0,82,22,1,0,0,
        0,83,84,5,62,0,0,84,24,1,0,0,0,85,86,5,60,0,0,86,87,5,61,0,0,87,
        26,1,0,0,0,88,89,5,62,0,0,89,90,5,61,0,0,90,28,1,0,0,0,91,92,5,105,
        0,0,92,93,5,102,0,0,93,30,1,0,0,0,94,95,5,116,0,0,95,96,5,104,0,
        0,96,97,5,101,0,0,97,98,5,110,0,0,98,32,1,0,0,0,99,100,5,101,0,0,
        100,101,5,108,0,0,101,102,5,115,0,0,102,103,5,101,0,0,103,34,1,0,
        0,0,104,105,5,101,0,0,105,106,5,110,0,0,106,107,5,100,0,0,107,108,
        5,105,0,0,108,109,5,102,0,0,109,36,1,0,0,0,110,111,5,119,0,0,111,
        112,5,104,0,0,112,113,5,105,0,0,113,114,5,108,0,0,114,115,5,101,
        0,0,115,38,1,0,0,0,116,117,5,100,0,0,117,118,5,111,0,0,118,40,1,
        0,0,0,119,120,5,101,0,0,120,121,5,110,0,0,121,122,5,100,0,0,122,
        123,5,119,0,0,123,124,5,104,0,0,124,125,5,105,0,0,125,126,5,108,
        0,0,126,127,5,101,0,0,127,42,1,0,0,0,128,129,5,102,0,0,129,130,5,
        117,0,0,130,131,5,110,0,0,131,132,5,99,0,0,132,44,1,0,0,0,133,134,
        5,101,0,0,134,135,5,110,0,0,135,136,5,100,0,0,136,137,5,102,0,0,
        137,138,5,117,0,0,138,139,5,110,0,0,139,140,5,99,0,0,140,46,1,0,
        0,0,141,143,7,0,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,
        0,0,144,145,1,0,0,0,145,48,1,0,0,0,146,150,5,34,0,0,147,149,8,1,
        0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,
        0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,154,5,34,0,0,154,50,1,0,
        0,0,155,157,7,2,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,1,0,
        0,0,158,159,1,0,0,0,159,52,1,0,0,0,160,162,5,13,0,0,161,160,1,0,
        0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,164,5,10,0,0,164,54,1,0,
        0,0,165,167,7,3,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,166,1,0,
        0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,171,6,27,0,0,171,56,1,0,
        0,0,172,173,5,47,0,0,173,174,5,47,0,0,174,178,1,0,0,0,175,177,8,
        4,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,
        0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,6,28,0,0,182,58,1,
        0,0,0,7,0,144,150,158,161,168,178,1,6,0,0
    ]

class MiniLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    MUL = 5
    DIV = 6
    ADD = 7
    SUB = 8
    EQ = 9
    NEQ = 10
    LT = 11
    GT = 12
    LEQ = 13
    GEQ = 14
    IF = 15
    THEN = 16
    ELSE = 17
    ENDIF = 18
    WHILE = 19
    DO = 20
    ENDWHILE = 21
    FUNC = 22
    ENDFUNC = 23
    ID = 24
    STRING = 25
    INT = 26
    NEWLINE = 27
    WS = 28
    LINE_COMMENT = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "','", "')'", "'*'", "'/'", "'+'", "'-'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'if'", "'then'", "'else'", 
            "'endif'", "'while'", "'do'", "'endwhile'", "'func'", "'endfunc'" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "ADD", "SUB", "EQ", "NEQ", "LT", "GT", "LEQ", 
            "GEQ", "IF", "THEN", "ELSE", "ENDIF", "WHILE", "DO", "ENDWHILE", 
            "FUNC", "ENDFUNC", "ID", "STRING", "INT", "NEWLINE", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "MUL", "DIV", "ADD", "SUB", 
                  "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "IF", "THEN", "ELSE", 
                  "ENDIF", "WHILE", "DO", "ENDWHILE", "FUNC", "ENDFUNC", 
                  "ID", "STRING", "INT", "NEWLINE", "WS", "LINE_COMMENT" ]

    grammarFileName = "MiniLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


